// ---------------------------------------------------------------------------

#include <vcl.h>
#include <vector>
#pragma hdrstop

#include "Unit1.h"
#include "Unit2.h"
#include "Output.h"
using namespace std;
// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "cspin"
#pragma resource "*.dfm"
TForm1 *Form1;
int a = 0, b = 10;
vector<int> stolb;

// ---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner) : TForm(Owner)
{
}
// ---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender)
{
	Form1->TextProg->Caption = "Массив состоит из целых чисел. Определить номера столбцов,\nсумма элементов в которых находится в заданном диапозоне";
	int n = 2;
	SG1->ColCount = n + 1;
	for (int i = 1; i < SG1->ColCount; i++)
		SG1->Cells[i][0] = i;
	SG1->RowCount = n + 1;
	for (int i = 1; i < SG1->RowCount; i++)
		SG1->Cells[0][i] = i;
}
// ---------------------------------------------------------------------------

void __fastcall TForm1::ProccButtClick(TObject *Sender)
{
	int S, P, O;
	a = CLeftEdit->Value;
	b = CRightEdit->Value;
	if (b < a)
		ShowMessage("Ошибка, 'B' должно быть больше или равно 'A'!");
	else
	{
		P = 0; O = 0;
		for (int j = 1; j < SG1->ColCount; j++)
		{
			S = 0;
			for (int i = 1; i < SG1->RowCount; i++)
			{
				if (SG1->Cells[j][i] == "" || SG1->Cells[j][i] == "-")
					SG1->Cells[j][i] = 0;
				S += StrToInt(SG1->Cells[j][i]);
				if (SG1->Cells[j][i]>0)
					P+=1;
				else
					O+=1;
			}
			if (S >= a && S <= b)
				stolb.push_back(j);
		}
		if (stolb.empty())
		{
			Form5->Show();
			Form5->AddResLabel->Caption="Нет столбцов, сумма элементов в которых\nнаходится в заданном диапозоне.";
		}
		else
		{
			Form5->Show();
			if (IntToStr(stolb[0]) == 2)
			   Form5->AddResLabel->Caption="Во " + IntToStr(stolb[0]);
			else
				Form5->AddResLabel->Caption="В " + IntToStr(stolb[0]);
			for (int i = 1; i<stolb.size(); i++)
			{
				Form5->AddResLabel->Caption = Form5->AddResLabel->Caption + " ," + IntToStr(stolb[i]);
			}
			if (stolb.size() == 1) Form5->AddResLabel->Caption = Form5->AddResLabel->Caption + " столбце";
			else Form5->AddResLabel->Caption = Form5->AddResLabel->Caption + " столбцах";
			Form5->AddResLabel->Caption = Form5->AddResLabel->Caption + " сумма элементов\nнаходится в заданном диапозоне.";
		}
		stolb.clear();
		if (Form3->CB1->Checked)
		{
			Form5->ClientHeight = 189;
			Form5->Butt->Top = 144;
			Form5->AddSecondLabel->Visible = true;
			Form5->OutSecondLabel->Visible = true;
			for (int j = 1; j < SG1->ColCount; j++)
				for (int i = 1; i < SG1->RowCount; i++)
					if (SG1->Cells[j][i]>0)
						P+=1;
					else O+=1;
			if (P>O)
				Form5->AddSecondLabel->Caption = "В заданом массиве больше половины\nположительных элементов.";
			else
				Form5->AddSecondLabel->Caption = "В заданом массиве не больше половины\nположительных элементов.";
		}
		else
		{
            //Form5->AddResLabel->Caption = "";
			Form5->AddSecondLabel->Caption = "";
			Form5->AddSecondLabel->Visible = false;
			Form5->OutSecondLabel->Visible = false;
			Form5->ClientHeight = 120;
			Form5->Butt->Top = 80;
        }
	}
}
// ---------------------------------------------------------------------------

void __fastcall TForm1::SG1KeyPress(TObject *Sender, System::WideChar &Key)
{
	if (!(Key >= '0' && Key <= '9') && (Key != '-') && (Key != VK_BACK))
	{
		Key = 0;
	}
}
// ---------------------------------------------------------------------------

void __fastcall TForm1::CRowEditChange(TObject *Sender)
{
	int n = CRowEdit->Value;
	SG1->RowCount = n + 1;
	for (int i = 1; i < SG1->RowCount; i++)
		SG1->Cells[0][i] = i;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::CColEditChange(TObject *Sender)
{
	int n = CColEdit->Value;
	SG1->ColCount = n + 1;
	for (int i = 1; i < SG1->ColCount; i++)
		SG1->Cells[i][0] = i;
}
//---------------------------------------------------------------------------

